Flite {
  Entrypoint = Script

    /**
     * WHITESPACE HANDLING
     */
    sourceCharacter = any

    // Override Ohm's built-in definition of space.
    space := whitespace | eol | comment

    whitespace = 
    | "\t"
    | "\x0B"    -- verticalTab
    | "\x0C"    -- formFeed
    | " "
    | "\u00A0"  -- noBreakSpace
    | "\uFEFF"  -- byteOrderMark
    | unicodeSpaceSeparator

    eol = "\n" | "\r" | "\u2028" | "\u2029"
    eolSequence = "\n" | "\r" ~"\n" | "\u2028" | "\u2029" | "\r\n"
    lineContinuation = "\\" eolSequence

    spacesNoNL = (whitespace | singleLineComment | multiLineCommentNoNL)*

    sc = space* (";" | end)
    | spacesNoNL (eol | ~multiLineCommentNoNL multiLineComment | &"}")


    /**
     * CORE
     */

    BoundedDangleListOf<open, expr, sep, close> = open ListOf<expr, sep> sep? close
    BoundedDangleNonemptyListOf<open, expr, sep, close> =
    | open NonemptyListOf<expr, sep> sep? close -- notEmpty
    | open close                                -- empty

    Script = ModuleDeclaration? OpenStatement* ImportStatement* ScriptBody

    ScriptBody = 
    | BodyItem #sc (BodyItem #sc)*  -- one
    | sc

    BodyItem = (Declaration | Statement)

    StatementList = Statement*

    Statement = 
    | Block                 -- block
    | EmptyStatement        -- empty
    | ExpressionStatement   -- expression
    | DebuggerStatement     -- debugger

    Block = "{" ScriptBody "}"

    EmptyStatement = 
    | "\n" // note: this semicolon eats newlines
    | "{" "}"   -- block

    ExpressionStatement = ~("{") Expression

    DebuggerStatement = #(debugger sc)

    ModuleDeclaration =
    | module namespace exporting BoundedDangleListOf<"{", AliasableIdentifier, ",", "}">  -- selective
    | module namespace  -- all

    OpenStatement =
    | open BoundedDangleListOf<"{", AliasableIdentifier, ",", "}"> from namespace -- some
    | open namespace                                           -- all

    ImportStatement =
    | import BoundedDangleListOf<"{", AliasableIdentifier, ",", "}"> from noSubstitutionTemplate -- some
    | import "*" as identifier from noSubstitutionTemplate-- cjs
    | import AliasableIdentifier from noSubstitutionTemplate-- default
    | import noSubstitutionTemplate-- bindless

    AliasableIdentifier =
    | ImportIdentifier as ImportIdentifier -- alias
    | ImportIdentifier

    ImportIdentifier = default | identifier

    Declaration = 
    | ConstDeclaration
    | TypeDeclaration
    | EnumDeclaration

    ConstDeclaration =
    | const ConstIdentifier TypeAnnotation? "=" Expression

    ConstIdentifier =
    | BoundedDangleListOf<"[", ConstIdentifier, ",", "]">  
    | BoundedDangleListOf<"{", ConstObjectDestructureItem, ",", "}"> 
    | identifier

    ConstObjectDestructureItem =
    | ConstIdentifier ":" identifier      -- alias
    | ConstIdentifier

    TypeDeclaration = type customTypeName GenericDeclaration? "=" TypeExpression

    Expression (an expression) =
    | JsxExpression
    | MatchExpression
    | FunctionExpression
    | IfElseExpression 
    | AwaitExpression
    | TopExpression
    | PrimaryExpression

    JsxExpression =
    | JsxElement
    | JsxFragment

    JsxElement =
    | JsxSelfClosingElement
    | JsxOpeningTag JsxChildren? JsxClosingTag  -- wrap

    JsxSelfClosingElement = "<" jsxIdentifier JsxAttributes? "/>"

    JsxOpeningTag = "<" jsxIdentifier JsxAttributes? ">"

    JsxClosingTag = "</" jsxIdentifier ">"

    JsxFragment = "<>" JsxChildren? "</>"

    jsxIdentifier =
    | identifier  
    | identifier ":" identifier         -- namespace
    | jsxIdentifier "." jsxIdentifier   -- memeber

    JsxAttributes = 
    | JsxSpreadAttribute JsxAttributes?
    | JsxAttribute JsxAttributes?

    JsxSpreadAttribute = "{" "..." Expression "}"

    JsxAttribute = jsxIdentifier "=" JsxAttributeValue

    JsxAttributeValue = 
    | stringLiteral 
    | TemplateLiteral<Expression>
    | "{" Expression "}" -- raw
    | JsxExpression

    JsxChildren = JsxChild*

    JsxChild =
    | jsxTextCharacter+
    | JsxExpression
    | "{" &"{" ObjectLiteral "}"  -- object
    | "{" Statement "}"           -- statement

    jsxTextCharacter = ~("{" | "}" | "<" | ">") sourceCharacter

    PrimaryExpression =
    | identifier
    | literal
    | ArrayLiteral
    | ObjectLiteral
    | TemplateLiteral<Expression>
    | atSymbol
    | "(" Expression ")"  -- parenExpr

    TemplateLiteral<Expr> = 
    | templateHead TemplateMiddle<Expr>* Expr templateTail  -- withsub
    | noSubstitutionTemplate                          -- nosub

    TemplateMiddle<Expr> = Expr templateMiddle

    ArrayLiteral = 
    | BoundedDangleListOf<"[", Expression, ",", "]">

    ObjectLiteral = 
    | BoundedDangleListOf<"{", PropertyAssignment, ",", "}">

    PropertyAssignment = 
    | "..." Expression                            -- spread
    | PropertyName ":" Expression                 -- basic
    | identifierName                              -- shorthand
    | "[" Expression "]" ":" Expression           -- computed

    PropertyName = 
    | identifierName  --identifier
    | stringLiteral   --string
    | numericLiteral  --number

    IfElseExpression = if "(" LogicalORExpression ")" Statement else Statement

    MatchExpression = match MatchSubject MatchBlock

    MatchSubject = "(" Expression ")"

    MatchBlock = "{" MatchClause* "}"

    MatchClause = (default | Expression) #(~eol) "->" Statement

    // TODO: support matching on types (like an instanceof operator)
    MatchPattern = 
      | DataPattern
      | nativeTypes
      | customTypeName
      | literal
      | ArrayLiteral
      | ObjectLiteral
      | TemplateLiteral<Expression>
      | "(" MatchPattern ")"  -- parens

    DataPattern = customTypeName BoundedDangleListOf<"<", identifier, ",", ">">

    FunctionExpression =
    | async ~async FunctionExpression                           -- async
    | BoundedDangleListOf<"(", Parameter, ",", ")"> TypeAnnotation? #(~eol) "=>" Statement -- parens
    | Parameter #(~eol) "=>" Statement                                      -- bare

    Parameter = "..."? identifier TypeAnnotation?

    AwaitExpression = await ~await Expression

    TypeAnnotation = ":" TypeExpression

    TypeExpression = 
      | typeof TypeExpression -- typeof
      | keyof TypeExpression -- keyof
      | ConditionalTypeExpression
      | TypeExpression "[]" ~"|" -- arrayShorthand
      | TypeExpression "&" TypeExpression -- intersection
      | FunctionType
      | VariantType
      | ObjectType
      | TupleType
      | TemplateLiteral<TypeExpression>
      | TypeReference
      | stringLiteral | booleanLiteral | numericLiteral
    
    FunctionType = BoundedDangleListOf<"(", Parameter, ",", ")">  #(~eol) "=>" TypeExpression

    ConditionalTypeExpression =
      | customTypeName extends (customTypeName|nativeTypes) "?" TypeExpression ":" TypeExpression

    VariantType = 
      | "|"? TypeExpression "|" NonemptyListOf<TypeExpression, "|"> -- multi
      | "|"? TypeExpression -- single

    EnumDeclaration = enum customTypeName GenericDeclaration? BoundedDangleListOf<"{", EnumMember, ",", "}">

    EnumMember =
      | customTypeName TypeArguments -- params
      | customTypeName               -- noParams

    TupleType = BoundedDangleListOf<"[", TypeExpression, ",", "]">

    TypeReference = (nativeTypes | customTypeName) TypeArguments?

    TypeArguments = BoundedDangleListOf<"<", TypeExpression, ",", ">">

    GenericDeclaration = BoundedDangleListOf<"<", customTypeName, ",", ">">

    ObjectType = BoundedDangleListOf<"{", PropertyTypeDefinition, ",", "}">

    PropertyTypeDefinition =
    | "[" customTypeName in TypeExpression "]" ":" TypeExpression -- mapped
    | identifier ":" TypeExpression                               -- standard

    TopExpression = CoalesceExpression

    CoalesceExpression =
    | ForwardPipeExpression "??" ForwardPipeExpression -- coalesce
    | ForwardPipeExpression 

    ForwardPipeExpression =
    | ForwardPipeExpression "|>" LogicalORExpression -- pipe
    | BackwardPipeExpression

    BackwardPipeExpression =
    | LogicalORExpression "<|" BackwardPipeExpression -- pipe
    | LogicalORExpression

    LogicalORExpression = 
    | LogicalORExpression "||" LogicalANDExpression -- lor
    | LogicalANDExpression

    LogicalANDExpression =
    | LogicalANDExpression "&&" BitwiseORExpression -- land
    | BitwiseORExpression

    BitwiseORExpression =
    | BitwiseORExpression "|" BitwiseXORExpression -- bor
    | BitwiseXORExpression

    BitwiseXORExpression =
    | BitwiseXORExpression "^" BitwiseANDExpression -- bxor
    | BitwiseANDExpression

    BitwiseANDExpression =
    | BitwiseANDExpression "&" EqualityExpression -- band
    | EqualityExpression

    EqualityExpression =
    | EqualityExpression "==" RelationalExpression  -- equal
    | EqualityExpression "!=" RelationalExpression  -- notEqual
    | RelationalExpression

    RelationalExpression =
    | RelationalExpression "<" ShiftExpression           -- lt
    | RelationalExpression ">" ShiftExpression           -- gt
    | RelationalExpression "<=" ShiftExpression          -- le
    | RelationalExpression ">=" ShiftExpression          -- ge
    | RelationalExpression "instanceof" ShiftExpression  -- instanceOfExp
    | ShiftExpression

    ShiftExpression = 
    | ShiftExpression "<<" AdditiveExpression  -- lsl
    | ShiftExpression ">>>" AdditiveExpression -- lsr
    | ShiftExpression ">>" AdditiveExpression  -- asr
    | AdditiveExpression

    AdditiveExpression =
    | AdditiveExpression "+" MultiplicativeExpression -- add
    | AdditiveExpression "-" MultiplicativeExpression -- sub
    | MultiplicativeExpression

    MultiplicativeExpression =
    | MultiplicativeExpression "*" UnaryExpression -- mul
    | MultiplicativeExpression "/" UnaryExpression -- div
    | MultiplicativeExpression "%" UnaryExpression -- mod
    | ExponentianExpression

    ExponentianExpression =
    | ExponentianExpression "**" UnaryExpression  -- expo
    | UnaryExpression

    UnaryExpression = 
    | typeof UnaryExpression  -- typeofExp
    | "+"    UnaryExpression  -- unaryPlus
    | "-"    UnaryExpression  -- unaryMinus
    | "~"    UnaryExpression  -- bnot
    | "!"    UnaryExpression  -- lnot
    | BottomExpression

    BottomExpression = CallExpression

    CallExpression =
    | CallExpression #(~eol) "[" Expression "]"               -- index
    | CallExpression "." identifier                           -- dot
    | CallExpression #(~eol) (GenericArgs #(~eol))? Arguments -- function
    | CallExpression #(~eol) EnumArgs                         -- enum
    | PrimaryExpression

    Arguments = BoundedDangleListOf<"(", Expression, ",", ")"> 
    EnumArgs = BoundedDangleListOf<"<", Expression, ",", ">">
    GenericArgs = BoundedDangleListOf<"<", TypeExpression, ",", ">">

    // Convenience rules for parsing keyword tokens.
    break = "break" ~identifierPart
    do = "do" ~identifierPart
    instanceof = "instanceof" ~identifierPart
    typeof = "typeof" ~identifierPart
    case = "case" ~identifierPart
    else = "else" ~identifierPart
    new = "new" ~identifierPart
    catch = "catch" ~identifierPart
    finally = "finally" ~identifierPart
    return = "return" ~identifierPart
    void = "void" ~identifierPart
    continue = "continue" ~identifierPart
    for = "for" ~identifierPart
    switch = "switch" ~identifierPart
    while = "while" ~identifierPart
    debugger = "debugger" ~identifierPart
    function = "function" ~identifierPart
    this = "this" ~identifierPart
    with = "with" ~identifierPart
    default = "default" ~identifierPart
    if = "if" ~identifierPart
    throw = "throw" ~identifierPart
    delete = "delete" ~identifierPart
    in = "in" ~identifierPart
    try = "try" ~identifierPart
    get = "get" ~identifierPart
    set = "set" ~identifierPart
    class = "class" ~identifierPart
    enum = "enum" ~identifierPart
    extends = "extends" ~identifierPart
    super = "super" ~identifierPart
    const = "const" ~identifierPart
    export = "export" ~identifierPart
    import = "import" ~identifierPart
    implements = "implements" ~identifierPart
    let = "let" ~identifierPart
    private = "private" ~identifierPart
    public = "public" ~identifierPart
    interface = "interface" ~identifierPart
    package = "package" ~identifierPart
    protected = "protected" ~identifierPart
    static = "static" ~identifierPart
    yield = "yield" ~identifierPart
    async = "async" ~identifierPart
    await = "await" ~identifierPart
    keyof = "keyof" ~identifierPart
    type = "type" ~identifierPart
    open = "open" ~identifierPart
    from = "from" ~identifierPart
    as = "as" ~identifierPart
    match = "match" ~identifierPart
    atSymbol = "@" ~identifierPart
    module = "module" ~identifierPart
    exporting = "exporting" ~identifierPart
    readonly = "readonly" ~identifierPart

    comment = multiLineComment | singleLineComment

    multiLineComment = "/*" (~"*/" sourceCharacter)* "*/"
    singleLineComment = "//" (~eol sourceCharacter)*

    customTypeName = upper alnum*
    identifier (an identifier) = ~reservedWord identifierName
    identifierName = identifierStart identifierPart*

    identifierStart = letter | "$" | "_"
    | "\\" unicodeEscapeSequence -- escaped
    identifierPart = identifierStart | unicodeCombiningMark
    | unicodeDigit | unicodeConnectorPunctuation
    | "\u200C" | "\u200D"
    letter += unicodeCategoryNl
    unicodeCategoryNl
    = "\u2160".."\u2182" | "\u3007" | "\u3021".."\u3029"
    unicodeDigit (a digit)
    = "\u0030".."\u0039" | "\u0660".."\u0669" | "\u06F0".."\u06F9" | "\u0966".."\u096F" | "\u09E6".."\u09EF" | "\u0A66".."\u0A6F" | "\u0AE6".."\u0AEF" | "\u0B66".."\u0B6F" | "\u0BE7".."\u0BEF" | "\u0C66".."\u0C6F" | "\u0CE6".."\u0CEF" | "\u0D66".."\u0D6F" | "\u0E50".."\u0E59" | "\u0ED0".."\u0ED9" | "\u0F20".."\u0F29" | "\uFF10".."\uFF19"

    unicodeCombiningMark (a Unicode combining mark)
    = "\u0300".."\u0345" | "\u0360".."\u0361" | "\u0483".."\u0486" | "\u0591".."\u05A1" | "\u05A3".."\u05B9" | "\u05BB".."\u05BD" | "\u05BF".."\u05BF" | "\u05C1".."\u05C2" | "\u05C4".."\u05C4" | "\u064B".."\u0652" | "\u0670".."\u0670" | "\u06D6".."\u06DC" | "\u06DF".."\u06E4" | "\u06E7".."\u06E8" | "\u06EA".."\u06ED" | "\u0901".."\u0902" | "\u093C".."\u093C" | "\u0941".."\u0948" | "\u094D".."\u094D" | "\u0951".."\u0954" | "\u0962".."\u0963" | "\u0981".."\u0981" | "\u09BC".."\u09BC" | "\u09C1".."\u09C4" | "\u09CD".."\u09CD" | "\u09E2".."\u09E3" | "\u0A02".."\u0A02" | "\u0A3C".."\u0A3C" | "\u0A41".."\u0A42" | "\u0A47".."\u0A48" | "\u0A4B".."\u0A4D" | "\u0A70".."\u0A71" | "\u0A81".."\u0A82" | "\u0ABC".."\u0ABC" | "\u0AC1".."\u0AC5" | "\u0AC7".."\u0AC8" | "\u0ACD".."\u0ACD" | "\u0B01".."\u0B01" | "\u0B3C".."\u0B3C" | "\u0B3F".."\u0B3F" | "\u0B41".."\u0B43" | "\u0B4D".."\u0B4D" | "\u0B56".."\u0B56" | "\u0B82".."\u0B82" | "\u0BC0".."\u0BC0" | "\u0BCD".."\u0BCD" | "\u0C3E".."\u0C40" | "\u0C46".."\u0C48" | "\u0C4A".."\u0C4D" | "\u0C55".."\u0C56" | "\u0CBF".."\u0CBF" | "\u0CC6".."\u0CC6" | "\u0CCC".."\u0CCD" | "\u0D41".."\u0D43" | "\u0D4D".."\u0D4D" | "\u0E31".."\u0E31" | "\u0E34".."\u0E3A" | "\u0E47".."\u0E4E" | "\u0EB1".."\u0EB1" | "\u0EB4".."\u0EB9" | "\u0EBB".."\u0EBC" | "\u0EC8".."\u0ECD" | "\u0F18".."\u0F19" | "\u0F35".."\u0F35" | "\u0F37".."\u0F37" | "\u0F39".."\u0F39" | "\u0F71".."\u0F7E" | "\u0F80".."\u0F84" | "\u0F86".."\u0F87" | "\u0F90".."\u0F95" | "\u0F97".."\u0F97" | "\u0F99".."\u0FAD" | "\u0FB1".."\u0FB7" | "\u0FB9".."\u0FB9" | "\u20D0".."\u20DC" | "\u20E1".."\u20E1" | "\u302A".."\u302F" | "\u3099".."\u309A" | "\uFB1E".."\uFB1E" | "\uFE20".."\uFE23"

    unicodeConnectorPunctuation = "\u005F" | "\u203F".."\u2040" | "\u30FB" | "\uFE33".."\uFE34" | "\uFE4D".."\uFE4F" | "\uFF3F" | "\uFF65"
    unicodeSpaceSeparator = "\u2000".."\u200B" | "\u3000"

    nativeTypes = "string" | "number" | "boolean" | "void" | "array" | "object" | "unknown"

    namespace = listOf<customTypeName, ".">

    reservedWord = keyword | unusedReservedKeyword | booleanLiteral

    // Note: keywords that are the complete prefix of another keyword should
    // be prioritized (e.g. 'in' should come before 'instanceof')
    keyword = 
    | as
    | async
    | await
    | case     
    | const
    | debugger 
    | else      
    | exporting
    | extends
    | from
    | if        
    | import
    | instanceof 
    | keyof
    | match
    | module
    | open
    | type
    | typeof
    | enum
    | atSymbol

    unusedReservedKeyword = 
    | break    
    | catch    
    | class       
    | continue 
    | default  
    | delete   
    | do        
    | enum          
    | export
    | finally   
    | for       
    | function  
    | implements    
    | in        
    | interface   
    | let     
    | new        
    | package       
    | private   
    | protected 
    | public
    | readonly
    | return     
    | static
    | super       
    | switch     
    | this       
    | throw
    | try
    | void
    | while
    | with
    | yield


    /*
        Note: Punctuator and DivPunctuator (see https://es5.github.io/x7.html#x7.7) are
        not currently used by this grammar.
      */

    literal = 
    | booleanLiteral 
    | numericLiteral
    | stringLiteral 
    | regularExpressionLiteral

    booleanLiteral = ("true" | "false") ~identifierPart

    // For semantics on how decimal literals are constructed, see section 7.8.3

    // Note that the ordering of hexIntegerLiteral and decimalLiteral is reversed w.r.t. the spec
    // This is intentional: the order decimalLiteral | hexIntegerLiteral will parse
    // "0x..." as a decimal literal "0" followed by "x..."
    numericLiteral = octalIntegerLiteral | hexIntegerLiteral | decimalLiteral

    decimalLiteral = 
    | decimalIntegerLiteral "." decimalDigit* exponentPart -- bothParts
    |                       "." decimalDigit+ exponentPart -- decimalsOnly
    | decimalIntegerLiteral                   exponentPart -- integerOnly

    decimalIntegerLiteral = 
    | nonZeroDigit decimalDigit*  -- nonZero
    | "0"                         -- zero

    decimalDigit = "0".."9" | "_"
    nonZeroDigit = "1".."9"

    exponentPart = exponentIndicator signedInteger -- present
    |                                 -- absent

    exponentIndicator = "e" | "E"
    signedInteger = "+" decimalDigit* -- positive
    | "-" decimalDigit* -- negative
    |     decimalDigit+ -- noSign

    hexIntegerLiteral = "0x" hexDigit+
    | "0X" hexDigit+

    // hexDigit defined in Ohm's built-in rules (otherwise: hexDigit = "0".."9" | "a".."f" | "A".."F")

    octalIntegerLiteral = "0" octalDigit+

    octalDigit = "0".."7"

    stringLiteral = "'" singleStringCharacter* "'"
    singleStringCharacter = 
    | ~("'" | "\\" | eol) sourceCharacter -- nonEscaped
    | "\\" escapeSequence                            -- escaped

    escapeSequence = 
    | unicodeEscapeSequence
    | hexEscapeSequence
    | octalEscapeSequence
    | characterEscapeSequence 

    characterEscapeSequence = singleEscapeCharacter | nonEscapeCharacter
    singleEscapeCharacter = "'" | "\"" | "\\" | "b" | "f" | "n" | "r" | "t" | "v"
    nonEscapeCharacter = ~(escapeCharacter | eol) sourceCharacter
    escapeCharacter = singleEscapeCharacter | decimalDigit | "x" | "u"

    template = 
    | noSubstitutionTemplate
    | templateHead

    noSubstitutionTemplate = "`" templateCharacters? "`"

    templateHead = "`" templateCharacters? "${" 

    templateMiddle = "}" templateCharacters? "${"

    templateTail = "}" templateCharacters? "`" 

    templateCharacters = templateCharacter+

    templateCharacter = 
    | "$" ~"{" -- alt1
    | "\\" escapeSequence -- alt2
    | lineContinuation -- alt3
    | eolSequence -- alt4
    | ~("`" | "\\" | "$" | eol) sourceCharacter -- alt5

    octalEscapeSequence = zeroToThree octalDigit octalDigit    -- whole
    | fourToSeven octalDigit               -- eightTimesfourToSeven
    | zeroToThree octalDigit ~decimalDigit -- eightTimesZeroToThree
    | octalDigit ~decimalDigit             -- octal
    hexEscapeSequence = "x" hexDigit hexDigit
    unicodeEscapeSequence = "u" hexDigit hexDigit hexDigit hexDigit

    zeroToThree = "0".."3"
    fourToSeven = "4".."7"

    // §7.8.5 Regular Expression Literals -- https://es5.github.io/#x7.8.5

    regularExpressionLiteral = "/" regularExpressionBody "/" regularExpressionFlags
    regularExpressionBody = regularExpressionFirstChar regularExpressionChar*
    regularExpressionFirstChar = ~("*" | "\\" | "/" | "[") regularExpressionNonTerminator
    | regularExpressionBackslashSequence
    | regularExpressionClass
    regularExpressionChar = ~("\\" | "/" | "[") regularExpressionNonTerminator
    | regularExpressionBackslashSequence
    | regularExpressionClass
    regularExpressionBackslashSequence = "\\" regularExpressionNonTerminator
    regularExpressionNonTerminator = ~(eol) sourceCharacter
    regularExpressionClass = "[" regularExpressionClassChar* "]"
    regularExpressionClassChar = ~("]" | "\\") regularExpressionNonTerminator
    | regularExpressionBackslashSequence
    regularExpressionFlags = identifierPart*

    // === Implementation-level rules (not part of the spec) ===

    multiLineCommentNoNL = "/*" (~("*/" | eol) sourceCharacter)* "*/"

}
