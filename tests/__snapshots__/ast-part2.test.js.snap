// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`typeof type expression 1`] = `
{
  "body": [
    {
      "identifier": {
        "name": "Foo",
        "type": "Identifier",
      },
      "parameters": [],
      "type": "TypeDeclaration",
      "value": {
        "expression": {
          "arguments": {},
          "identifier": {
            "name": "Bar",
            "type": "Identifier",
          },
          "type": "TypeReference",
        },
        "kind": "typeof",
        "type": "OfTypeExpression",
      },
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`keyof type expression 1`] = `
{
  "body": [
    {
      "identifier": {
        "name": "Foo",
        "type": "Identifier",
      },
      "parameters": [],
      "type": "TypeDeclaration",
      "value": {
        "expression": {
          "arguments": {},
          "identifier": {
            "name": "Bar",
            "type": "Identifier",
          },
          "type": "TypeReference",
        },
        "kind": "keyof",
        "type": "OfTypeExpression",
      },
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`array shorthand type expression 1`] = `
{
  "body": [
    {
      "identifier": {
        "name": "Users",
        "type": "Identifier",
      },
      "parameters": [],
      "type": "TypeDeclaration",
      "value": {
        "arguments": {
          "arguments": {},
          "identifier": {
            "name": "User",
            "type": "Identifier",
          },
          "type": "TypeReference",
        },
        "identifier": {
          "name": "array",
          "type": "Identifier",
        },
        "type": "TypeReference",
      },
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`intersection type expression 1`] = `
{
  "body": [
    {
      "identifier": {
        "name": "User",
        "type": "Identifier",
      },
      "parameters": [],
      "type": "TypeDeclaration",
      "value": {
        "left": {
          "arguments": {},
          "identifier": {
            "name": "Guest",
            "type": "Identifier",
          },
          "type": "TypeReference",
        },
        "right": {
          "definitions": [
            {
              "name": {
                "name": "password",
                "type": "Identifier",
              },
              "type": "PropertyTypeDefinition",
              "value": {
                "arguments": {},
                "identifier": {
                  "kind": "string",
                  "type": "NativeType",
                },
                "type": "TypeReference",
              },
            },
          ],
          "type": "ObjectType",
        },
        "type": "IntersectionType",
      },
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`variant type expression (single) 1`] = `
{
  "body": [
    {
      "identifier": {
        "name": "Foo",
        "type": "Identifier",
      },
      "parameters": [],
      "type": "TypeDeclaration",
      "value": {
        "type": "VariantType",
        "types": [
          {
            "identifier": {
              "name": "Bar",
              "type": "Identifier",
            },
            "parameters": [],
            "type": "DataConstructor",
          },
        ],
      },
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`variant type expression 1`] = `
{
  "body": [
    {
      "identifier": {
        "name": "Direction",
        "type": "Identifier",
      },
      "parameters": [],
      "type": "TypeDeclaration",
      "value": {
        "type": "VariantType",
        "types": [
          {
            "identifier": {
              "name": "Left",
              "type": "Identifier",
            },
            "parameters": [],
            "type": "DataConstructor",
          },
          {
            "identifier": {
              "name": "Right",
              "type": "Identifier",
            },
            "parameters": [],
            "type": "DataConstructor",
          },
        ],
      },
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`variant with generics type expression 1`] = `
{
  "body": [
    {
      "identifier": {
        "name": "Maybe",
        "type": "Identifier",
      },
      "parameters": [
        [
          {
            "name": "T",
            "type": "Identifier",
          },
        ],
      ],
      "type": "TypeDeclaration",
      "value": {
        "type": "VariantType",
        "types": [
          {
            "identifier": {
              "name": "Some",
              "type": "Identifier",
            },
            "parameters": [
              {
                "arguments": {},
                "identifier": {
                  "name": "T",
                  "type": "Identifier",
                },
                "type": "TypeReference",
              },
            ],
            "type": "DataConstructor",
          },
          {
            "identifier": {
              "name": "None",
              "type": "Identifier",
            },
            "parameters": [],
            "type": "DataConstructor",
          },
        ],
      },
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`function type expression 1`] = `
{
  "body": [
    {
      "identifier": {
        "name": "AuthFn",
        "type": "Identifier",
      },
      "parameters": [],
      "type": "TypeDeclaration",
      "value": {
        "parameters": [
          {
            "identifier": {
              "name": "user",
              "type": "Identifier",
            },
            "isSpread": {},
            "type": "Parameter",
            "typeAnnotation": {
              "expression": {
                "arguments": {},
                "identifier": {
                  "name": "User",
                  "type": "Identifier",
                },
                "type": "TypeReference",
              },
              "type": "TypeAnnotation",
            },
          },
        ],
        "returnType": {
          "arguments": {},
          "identifier": {
            "name": "AuthResult",
            "type": "Identifier",
          },
          "type": "TypeReference",
        },
        "type": "FunctionType",
      },
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`calling a function 1`] = `
{
  "body": [
    {
      "arguments": [
        {
          "kind": "string",
          "type": "PrimitiveValue",
          "value": "World",
        },
      ],
      "expression": {
        "name": "greet",
        "type": "Identifier",
      },
      "type": "FunctionCall",
      "typeArguments": [],
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`calling an async function 1`] = `
{
  "body": [
    {
      "expression": {
        "arguments": [
          {
            "name": "url",
            "type": "Identifier",
          },
        ],
        "expression": {
          "name": "fetch",
          "type": "Identifier",
        },
        "type": "FunctionCall",
        "typeArguments": [],
      },
      "type": "AwaitExpression",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`calling a function with type arguments 1`] = `
{
  "body": [
    {
      "expression": {
        "arguments": [
          {
            "name": "url",
            "type": "Identifier",
          },
        ],
        "expression": {
          "name": "fetchModel",
          "type": "Identifier",
        },
        "type": "FunctionCall",
        "typeArguments": [
          [
            {
              "arguments": {},
              "identifier": {
                "name": "User",
                "type": "Identifier",
              },
              "type": "TypeReference",
            },
          ],
        ],
      },
      "type": "AwaitExpression",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`dot notation expression 1`] = `
{
  "body": [
    {
      "left": {
        "name": "foo",
        "type": "Identifier",
      },
      "right": {
        "name": "bar",
        "type": "Identifier",
      },
      "type": "DotNotationCall",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`index access on an identifier 1`] = `
{
  "body": [
    {
      "expression": {
        "name": "foo",
        "type": "Identifier",
      },
      "indexArgument": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "2",
      },
      "type": "IndexAccessCall",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`data value call 1`] = `
{
  "body": [
    {
      "arguments": [
        {
          "kind": "string",
          "type": "PrimitiveValue",
          "value": "test",
        },
      ],
      "expression": {
        "name": "Some",
        "type": "Identifier",
      },
      "type": "DataCall",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`if/else expression on single line 1`] = `
{
  "body": [
    {
      "condition": "true",
      "falseBlock": {
        "arguments": [],
        "expression": {
          "name": "falseBlock",
          "type": "Identifier",
        },
        "type": "FunctionCall",
        "typeArguments": [],
      },
      "trueBlock": {
        "arguments": [],
        "expression": {
          "name": "trueBlock",
          "type": "Identifier",
        },
        "type": "FunctionCall",
        "typeArguments": [],
      },
      "type": "IfElseExpression",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`if/else expression with blocks 1`] = `
{
  "body": [
    {
      "condition": "true",
      "falseBlock": {
        "body": [
          {
            "arguments": [],
            "expression": {
              "name": "falseBlock",
              "type": "Identifier",
            },
            "type": "FunctionCall",
            "typeArguments": [],
          },
        ],
        "type": "Block",
      },
      "trueBlock": {
        "body": [
          {
            "arguments": [],
            "expression": {
              "name": "trueBlock",
              "type": "Identifier",
            },
            "type": "FunctionCall",
            "typeArguments": [],
          },
        ],
        "type": "Block",
      },
      "type": "IfElseExpression",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`match expression with basic literal patterns 1`] = `
{
  "body": [
    {
      "clauses": [
        {
          "body": {
            "arguments": [],
            "expression": {
              "name": "trueBlock",
              "type": "Identifier",
            },
            "type": "FunctionCall",
            "typeArguments": [],
          },
          "isDefault": {},
          "pattern": "true",
          "type": "MatchClause",
        },
        {
          "body": {
            "arguments": [],
            "expression": {
              "name": "trueBlock",
              "type": "Identifier",
            },
            "type": "FunctionCall",
            "typeArguments": [],
          },
          "isDefault": {},
          "pattern": {
            "kind": "string",
            "type": "PrimitiveValue",
            "value": "yes",
          },
          "type": "MatchClause",
        },
        {
          "body": {
            "arguments": [],
            "expression": {
              "name": "gotNum",
              "type": "Identifier",
            },
            "type": "FunctionCall",
            "typeArguments": [],
          },
          "isDefault": {},
          "pattern": {
            "kind": "number",
            "type": "PrimitiveValue",
            "value": "14",
          },
          "type": "MatchClause",
        },
      ],
      "subject": {
        "name": "subject",
        "type": "Identifier",
      },
      "type": "MatchExpression",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`forward pipe with placeholder expression 1`] = `
{
  "body": [
    {
      "direction": "backward",
      "left": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "10",
      },
      "right": {
        "arguments": [
          {
            "kind": "string",
            "type": "PrimitiveValue",
            "value": "num: %d",
          },
          "@",
        ],
        "expression": {
          "left": {
            "name": "Console",
            "type": "Identifier",
          },
          "right": {
            "name": "log",
            "type": "Identifier",
          },
          "type": "DotNotationCall",
        },
        "type": "FunctionCall",
        "typeArguments": [],
      },
      "type": "PipeExpression",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`backward pipe 1`] = `
{
  "body": [
    {
      "direction": "backward",
      "left": {
        "arguments": [
          {
            "kind": "string",
            "type": "PrimitiveValue",
            "value": "num: %d",
          },
        ],
        "expression": {
          "left": {
            "name": "Console",
            "type": "Identifier",
          },
          "right": {
            "name": "log",
            "type": "Identifier",
          },
          "type": "DotNotationCall",
        },
        "type": "FunctionCall",
        "typeArguments": [],
      },
      "right": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "10",
      },
      "type": "PipeExpression",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`addition 1`] = `
{
  "body": [
    {
      "left": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "4",
      },
      "op": "addition",
      "right": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "5",
      },
      "type": "BinaryOperation",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`subtraction 1`] = `
{
  "body": [
    {
      "left": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "5",
      },
      "op": "subtraction",
      "right": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "4",
      },
      "type": "BinaryOperation",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`multiplication 1`] = `
{
  "body": [
    {
      "left": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "5",
      },
      "op": "multiply",
      "right": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "4",
      },
      "type": "BinaryOperation",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`division 1`] = `
{
  "body": [
    {
      "left": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "20",
      },
      "op": "divide",
      "right": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "4",
      },
      "type": "BinaryOperation",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`exponentiation 1`] = `
{
  "body": [
    {
      "left": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "2",
      },
      "op": "exponentiation",
      "right": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "10",
      },
      "type": "BinaryOperation",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`maths operators combined 1`] = `
{
  "body": [
    {
      "left": {
        "left": {
          "kind": "number",
          "type": "PrimitiveValue",
          "value": "4",
        },
        "op": "addition",
        "right": {
          "left": {
            "left": {
              "kind": "number",
              "type": "PrimitiveValue",
              "value": "5",
            },
            "op": "multiply",
            "right": {
              "kind": "number",
              "type": "PrimitiveValue",
              "value": "10",
            },
            "type": "BinaryOperation",
          },
          "op": "divide",
          "right": {
            "kind": "number",
            "type": "PrimitiveValue",
            "value": "2",
          },
          "type": "BinaryOperation",
        },
        "type": "BinaryOperation",
      },
      "op": "subtraction",
      "right": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "1",
      },
      "type": "BinaryOperation",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`equality comparison 1`] = `
{
  "body": [
    {
      "left": "true",
      "op": "equal",
      "right": "true",
      "type": "BinaryOperation",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`inequality comparison 1`] = `
{
  "body": [
    {
      "left": "true",
      "op": "notEqual",
      "right": "false",
      "type": "BinaryOperation",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;
