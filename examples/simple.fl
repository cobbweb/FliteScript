module Foo.Bar

type Either =
  | :Left<string>
  | :Right<string>
  | :Middle

const left = Left<`Left behind!`>

match (left) {
  Left<words> -> words
  Right<number> -> String(number) 
  Middle -> `middle`
}

/**
import { z } from `zod`
import { db } from `./Db`

const baz: string = `foo`

type Foo = { bar: string }
const foo: Foo = { bar: `baz` }

const greet = (name: string): string => {
  console.log(`test`)
  `Hello ${name}`
}

type Maybe<T> = :Some<T> | :None

const loginFormZ = z.object({
  email: z.string().email('Please enter a valid email address'),
  password: z
    .string()
    .min(8, 'Your password will be at least 8 characters long'),
})

const validateLoginFields = (
  email: Maybe<FormDataEntryValue>,
  password: Maybe<FormDataEntryValue>
) => {
  loginFormZ.safeParse({ email, password })
}

const getCurrentUser = async () => {
  await db.users.me.read({ fields: ['*', 'role.*'] })
}
*/
