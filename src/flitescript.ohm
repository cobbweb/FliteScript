FliteScript {
  Entrypoint = Script

  /**
   * WHITESPACE HANDLING
   */
  sourceCharacter = any

  // Override Ohm's built-in definition of space.
  space := whitespace | eol | comment

  whitespace = 
    | "\t"
    | "\x0B"    -- verticalTab
    | "\x0C"    -- formFeed
    | " "
    | "\u00A0"  -- noBreakSpace
    | "\uFEFF"  -- byteOrderMark
    | unicodeSpaceSeparator

  eol = "\n" | "\r" | "\u2028" | "\u2029"
  eolSequence = "\n" | "\r" ~"\n" | "\u2028" | "\u2029" | "\r\n"
  lineContinuation = "\\" eolSequence

  spacesNoNL = (whitespace | singleLineComment | multiLineCommentNoNL)*

  sc = space* (";" | end)
     | spacesNoNL (eol | ~multiLineCommentNoNL multiLineComment | &"}")


  /**
   * CORE
   */
  
  Script = OpenStatement* ImportStatement* ScriptBody
  
  ScriptBody = 
    | Line #sc (Line #sc)*             -- one
    | sc

  Line = (Declaration | Statement)
   
  StatementList = Statement*
  
  Statement = 
    | Block
    | EmptyStatement
    | ExpressionStatement
    | DebuggerStatement

  Block = "{" ScriptBody "}"

  EmptyStatement = 
    | "\n" // note: this semicolon eats newlines
    | "{" "}"   -- block

  ExpressionStatement = ~("{") Expression

  DebuggerStatement = #(debugger sc)
  
  OpenStatement =
    | open "{" ListOf<identifier, ","> ","? "}" from namespace -- some
    | open namespace                                           -- all
    
  ImportStatement =
    | import "{" ListOf<identifier, ","> ","? "}" from stringLiteral -- some
    | import "*" as identifier from stringLiteral                    -- cjs
    | import identifier from stringLiteral                           -- default
    | import stringLiteral                                           -- bindless

  Declaration = 
    | ConstDeclaration
    | TypeDeclaration
  
  ConstDeclaration =
    | const ConstIdentifier TypeAnnotation? "=" Expression
    
  ConstIdentifier =
    | "[" ListOf<ConstIdentifier, ","> ","? "]"             -- array
    | "{" ListOf<ConstObjectDestructureItem, ","> ","? "}"  -- object
    | identifier
  
  ConstObjectDestructureItem =
    | ConstIdentifier ":" identifier      -- alias
    | ConstIdentifier
    
  TypeDeclaration = type customTypeName GenericDeclaration? "=" TypeExpression

  Expression (an expression) =
    | JsxExpression
    | FunctionExpression
    | IfElseExpression 
    | AwaitExpression
    | MatchExpression
    | TopExpression
    | PrimaryExpression
    
  JsxExpression =
    | JsxElement
    | JsxFragment
    
  JsxElement =
    | JsxSelfClosingElement
    | JsxOpeningTag JsxChildren? JsxClosingTag  -- wrap

  JsxSelfClosingElement = "<" jsxIdentifier JsxAttributes? "/>"

  JsxOpeningTag = "<" jsxIdentifier JsxAttributes? ">"

  JsxClosingTag = "</" jsxIdentifier ">"

  JsxFragment = "<>" JsxChildren? "</>"

  jsxIdentifier =
    | identifier  
    | identifier ":" identifier         -- namespace
    | jsxIdentifier "." jsxIdentifier   -- memeber
    
  JsxAttributes = 
    | JsxSpreadAttribute JsxAttributes?
    | JsxAttribute JsxAttributes?

  JsxSpreadAttribute = "{" "..." Expression "}"

  JsxAttribute = jsxIdentifier "=" JsxAttributeValue

  JsxAttributeValue = 
    | stringLiteral 
    | TemplateLiteral
    | "{" Expression "}" -- raw
    | JsxExpression
    
  JsxChildren = JsxChild JsxChildren?

  JsxChild =
    | jsxText
    | JsxExpression
    | "{" &"{" ObjectLiteral "}"  -- object
    | "{" Statement "}"           -- statement
    
  jsxText =
    | jsxTextCharacter jsxText -- content
    | jsxTextCharacter
    
  jsxTextCharacter = ~("{" | "}" | "<" | ">") sourceCharacter

  PrimaryExpression =
    | identifier
    | literal
    | ArrayLiteral
    | ObjectLiteral
    | TemplateLiteral
    | "(" Expression ")"  -- parenExpr

  TemplateLiteral = 
    | noSubstitutionTemplate -- alt1
    | templateHead Expression TemplateSpans -- alt2

  TemplateSpans = 
    | templateTail -- alt1
    | TemplateMiddleList templateTail -- alt2

  TemplateMiddleList = 
    | TemplateMiddleList templateMiddle Expression -- alt2
    | templateMiddle Expression -- alt1

  ArrayLiteral = 
    | "[" ListOf<Expression, ","> "," "]" -- notEmpty
    | "[]"                                -- empty

  ObjectLiteral = 
    | "{" ListOf<PropertyAssignment, ","> "," "}"  -- trailingComma
    | "{" "}"                                      -- empty

  PropertyAssignment = 
    | "..." Expression                            -- spread
    | PropertyName ":" Expression                 -- basic
    | identifier                                  -- shorthand
    | "[" Expression "]" ":" Expression           -- computed

  PropertyName = 
    | identifierName
    | stringLiteral
    | numericLiteral

  IfElseExpression =
    | if "(" LogicalORExpression ")" Statement else Statement  -- if
    
  MatchExpression = match MatchSubject MatchBlock
  
  MatchSubject = "(" Expression ")"
  
  MatchBlock = "{" MatchCase* "}"

  MatchCase = (default | Expression) #(~eol) "->" Statement
    
  FunctionExpression =
    | async ~async FunctionExpression                           -- async
    | "(" ListOf<Param, ","> ")" TypeAnnotation? #(~eol) "=>" Statement -- parens
    | Param #(~eol) "=>" Statement                                      -- bare
  
  Param = "..."? identifier TypeAnnotation?
  
  AwaitExpression = await ~await Expression
  
  TypeAnnotation = ":" TypeExpression

  TypeExpression = 
    | typeof TypeExpression -- typeof
    | keyof TypeExpression -- keyof
    | TypeExpression "[]" -- arrayShorthand
    | ObjectType
    | VariantType
    | TupleType
    | customTypeName
    | nativeTypes

  VariantType =
    | NonemptyListOf<VariantIdenitier, "|">
    
  TupleType =
    | "[" ListOf<TypeExpression, ","> ","? "]"
    
  VariantIdenitier =
    | customTypeName "(" customTypeName ")" -- generic
    | customTypeName
  
  TypeDeclarationName =
    | identifier GenericDeclaration?
    
  GenericDeclaration =
    | "<" NonemptyListOf<GenericName, ","> ">" 
    
  GenericName = TypeDeclarationName | customTypeName

  ObjectType =
    | "{" ListOf<PropertyTypeDefinition, ","> "," "}"
    
  PropertyTypeDefinition =
    | identifierName ":" TypeExpression

  TopExpression = CoalesceExpression

  CoalesceExpression =
    | LogicalORExpression "??" LogicalORExpression  -- coalesce
    | LogicalORExpression

  LogicalORExpression = 
    | LogicalORExpression "||" LogicalANDExpression -- lor
    | LogicalANDExpression

  LogicalANDExpression =
    | LogicalANDExpression "&&" BitwiseORExpression -- land
    | BitwiseORExpression

  BitwiseORExpression =
    | BitwiseORExpression "|" BitwiseXORExpression -- bor
    | BitwiseXORExpression

  BitwiseXORExpression =
    | BitwiseXORExpression "^" BitwiseANDExpression -- bxor
    | BitwiseANDExpression

  BitwiseANDExpression =
    | BitwiseANDExpression "&" EqualityExpression -- band
    | EqualityExpression

  EqualityExpression =
    | EqualityExpression "==" RelationalExpression  -- equal
    | EqualityExpression "!=" RelationalExpression  -- notEqual
    | RelationalExpression

  RelationalExpression =
    | RelationalExpression "<" ShiftExpression           -- lt
    | RelationalExpression ">" ShiftExpression           -- gt
    | RelationalExpression "<=" ShiftExpression          -- le
    | RelationalExpression ">=" ShiftExpression          -- ge
    | RelationalExpression "instanceof" ShiftExpression  -- instanceOfExp
    | ShiftExpression

  ShiftExpression = 
    | ShiftExpression "<<" AdditiveExpression  -- lsl
    | ShiftExpression ">>>" AdditiveExpression -- lsr
    | ShiftExpression ">>" AdditiveExpression  -- asr
    | AdditiveExpression

  AdditiveExpression =
    | AdditiveExpression "+" MultiplicativeExpression -- add
    | AdditiveExpression "-" MultiplicativeExpression -- sub
    | MultiplicativeExpression

  MultiplicativeExpression =
    | MultiplicativeExpression "*" UnaryExpression -- mul
    | MultiplicativeExpression "/" UnaryExpression -- div
    | MultiplicativeExpression "%" UnaryExpression -- mod
    | ExponentianExpression

  ExponentianExpression =
    | ExponentianExpression "**" UnaryExpression  -- expo
    | UnaryExpression

  UnaryExpression = 
    | typeof UnaryExpression  -- typeofExp
    | "+"    UnaryExpression  -- unaryPlus
    | "-"    UnaryExpression  -- unaryMinus
    | "~"    UnaryExpression  -- bnot
    | "!"    UnaryExpression  -- lnot
    | BottomExpression

  BottomExpression =
    | CallExpression

  CallExpression =
    | CallExpression #(~eol) "[" Expression "]"  -- arrayRefExp
    | CallExpression #(~eol) "." identifierName  -- propRefExp
    | CallExpression #(~eol) Arguments           -- callExpExp
    | PrimaryExpression

  Arguments = "(" ListOf<Expression, ","> ")"


  // Convenience rules for parsing keyword tokens.
  break = "break" ~identifierPart
  do = "do" ~identifierPart
  instanceof = "instanceof" ~identifierPart
  typeof = "typeof" ~identifierPart
  case = "case" ~identifierPart
  else = "else" ~identifierPart
  new = "new" ~identifierPart
  catch = "catch" ~identifierPart
  finally = "finally" ~identifierPart
  return = "return" ~identifierPart
  void = "void" ~identifierPart
  continue = "continue" ~identifierPart
  for = "for" ~identifierPart
  switch = "switch" ~identifierPart
  while = "while" ~identifierPart
  debugger = "debugger" ~identifierPart
  function = "function" ~identifierPart
  this = "this" ~identifierPart
  with = "with" ~identifierPart
  default = "default" ~identifierPart
  if = "if" ~identifierPart
  throw = "throw" ~identifierPart
  delete = "delete" ~identifierPart
  in = "in" ~identifierPart
  try = "try" ~identifierPart
  get = "get" ~identifierPart
  set = "set" ~identifierPart
  class = "class" ~identifierPart
  enum = "enum" ~identifierPart
  extends = "extends" ~identifierPart
  super = "super" ~identifierPart
  const = "const" ~identifierPart
  export = "export" ~identifierPart
  import = "import" ~identifierPart
  implements = "implements" ~identifierPart
  let = "let" ~identifierPart
  private = "private" ~identifierPart
  public = "public" ~identifierPart
  interface = "interface" ~identifierPart
  package = "package" ~identifierPart
  protected = "protected" ~identifierPart
  static = "static" ~identifierPart
  yield = "yield" ~identifierPart
  async = "async" ~identifierPart
  await = "await" ~identifierPart
  keyof = "keyof" ~identifierPart
  type = "type" ~identifierPart
  open = "open" ~identifierPart
  from = "from" ~identifierPart
  as = "as" ~identifierPart
  match = "match" ~identifierPart

  comment = multiLineComment | singleLineComment

  multiLineComment = "/*" (~"*/" sourceCharacter)* "*/"
  singleLineComment = "//" (~eol sourceCharacter)*

  customTypeName = upper alnum*
  identifier (an identifier) = ~reservedWord identifierName
  identifierName = identifierStart identifierPart*

  identifierStart = letter | "$" | "_"
                  | "\\" unicodeEscapeSequence -- escaped
  identifierPart = identifierStart | unicodeCombiningMark
                 | unicodeDigit | unicodeConnectorPunctuation
                 | "\u200C" | "\u200D"
  letter += unicodeCategoryNl
  unicodeCategoryNl
    = "\u2160".."\u2182" | "\u3007" | "\u3021".."\u3029"
  unicodeDigit (a digit)
    = "\u0030".."\u0039" | "\u0660".."\u0669" | "\u06F0".."\u06F9" | "\u0966".."\u096F" | "\u09E6".."\u09EF" | "\u0A66".."\u0A6F" | "\u0AE6".."\u0AEF" | "\u0B66".."\u0B6F" | "\u0BE7".."\u0BEF" | "\u0C66".."\u0C6F" | "\u0CE6".."\u0CEF" | "\u0D66".."\u0D6F" | "\u0E50".."\u0E59" | "\u0ED0".."\u0ED9" | "\u0F20".."\u0F29" | "\uFF10".."\uFF19"

  unicodeCombiningMark (a Unicode combining mark)
    = "\u0300".."\u0345" | "\u0360".."\u0361" | "\u0483".."\u0486" | "\u0591".."\u05A1" | "\u05A3".."\u05B9" | "\u05BB".."\u05BD" | "\u05BF".."\u05BF" | "\u05C1".."\u05C2" | "\u05C4".."\u05C4" | "\u064B".."\u0652" | "\u0670".."\u0670" | "\u06D6".."\u06DC" | "\u06DF".."\u06E4" | "\u06E7".."\u06E8" | "\u06EA".."\u06ED" | "\u0901".."\u0902" | "\u093C".."\u093C" | "\u0941".."\u0948" | "\u094D".."\u094D" | "\u0951".."\u0954" | "\u0962".."\u0963" | "\u0981".."\u0981" | "\u09BC".."\u09BC" | "\u09C1".."\u09C4" | "\u09CD".."\u09CD" | "\u09E2".."\u09E3" | "\u0A02".."\u0A02" | "\u0A3C".."\u0A3C" | "\u0A41".."\u0A42" | "\u0A47".."\u0A48" | "\u0A4B".."\u0A4D" | "\u0A70".."\u0A71" | "\u0A81".."\u0A82" | "\u0ABC".."\u0ABC" | "\u0AC1".."\u0AC5" | "\u0AC7".."\u0AC8" | "\u0ACD".."\u0ACD" | "\u0B01".."\u0B01" | "\u0B3C".."\u0B3C" | "\u0B3F".."\u0B3F" | "\u0B41".."\u0B43" | "\u0B4D".."\u0B4D" | "\u0B56".."\u0B56" | "\u0B82".."\u0B82" | "\u0BC0".."\u0BC0" | "\u0BCD".."\u0BCD" | "\u0C3E".."\u0C40" | "\u0C46".."\u0C48" | "\u0C4A".."\u0C4D" | "\u0C55".."\u0C56" | "\u0CBF".."\u0CBF" | "\u0CC6".."\u0CC6" | "\u0CCC".."\u0CCD" | "\u0D41".."\u0D43" | "\u0D4D".."\u0D4D" | "\u0E31".."\u0E31" | "\u0E34".."\u0E3A" | "\u0E47".."\u0E4E" | "\u0EB1".."\u0EB1" | "\u0EB4".."\u0EB9" | "\u0EBB".."\u0EBC" | "\u0EC8".."\u0ECD" | "\u0F18".."\u0F19" | "\u0F35".."\u0F35" | "\u0F37".."\u0F37" | "\u0F39".."\u0F39" | "\u0F71".."\u0F7E" | "\u0F80".."\u0F84" | "\u0F86".."\u0F87" | "\u0F90".."\u0F95" | "\u0F97".."\u0F97" | "\u0F99".."\u0FAD" | "\u0FB1".."\u0FB7" | "\u0FB9".."\u0FB9" | "\u20D0".."\u20DC" | "\u20E1".."\u20E1" | "\u302A".."\u302F" | "\u3099".."\u309A" | "\uFB1E".."\uFB1E" | "\uFE20".."\uFE23"

  unicodeConnectorPunctuation = "\u005F" | "\u203F".."\u2040" | "\u30FB" | "\uFE33".."\uFE34" | "\uFE4D".."\uFE4F" | "\uFF3F" | "\uFF65"
  unicodeSpaceSeparator = "\u2000".."\u200B" | "\u3000"
  
  nativeTypes = "string" | "number" | "boolean" | "void" | "array" | "object"
  
  namespace = listOf<customTypeName, ".">

  reservedWord = keyword | unusedReservedKeyword | booleanLiteral

  // Note: keywords that are the complete prefix of another keyword should
  // be prioritized (e.g. 'in' should come before 'instanceof')
  keyword = 
    | async
    | await
    | case     
    | const
    | debugger 
    | else      
    | if        
    | instanceof 
    | keyof
    | return     
    | type
    | typeof
    | open
    | from
    | import
    | as
    | match

  unusedReservedKeyword = 
    | break    
    | catch    
    | class       
    | continue 
    | default  
    | delete   
    | do        
    | enum          
    | export
    | extends
    | finally   
    | for       
    | function  
    | implements    
    | in        
    | interface   
    | let     
    | new        
    | package       
    | private   
    | protected 
    | public
    | static
    | super       
    | switch     
    | this       
    | throw
    | try
    | void
    | while
    | with
    | yield


  /*
    Note: Punctuator and DivPunctuator (see https://es5.github.io/x7.html#x7.7) are
    not currently used by this grammar.
  */

  literal = 
    | booleanLiteral 
    | numericLiteral
    | stringLiteral 
    | regularExpressionLiteral

  booleanLiteral = ("true" | "false") ~identifierPart

  // For semantics on how decimal literals are constructed, see section 7.8.3

  // Note that the ordering of hexIntegerLiteral and decimalLiteral is reversed w.r.t. the spec
  // This is intentional: the order decimalLiteral | hexIntegerLiteral will parse
  // "0x..." as a decimal literal "0" followed by "x..."
  numericLiteral = octalIntegerLiteral | hexIntegerLiteral | decimalLiteral

  decimalLiteral = 
    | decimalIntegerLiteral "." decimalDigit* exponentPart -- bothParts
    |                       "." decimalDigit+ exponentPart -- decimalsOnly
    | decimalIntegerLiteral                   exponentPart -- integerOnly

  decimalIntegerLiteral = 
    | nonZeroDigit decimalDigit*  -- nonZero
    | "0"                         -- zero

  decimalDigit = "0".."9" | "_"
  nonZeroDigit = "1".."9"

  exponentPart = exponentIndicator signedInteger -- present
               |                                 -- absent

  exponentIndicator = "e" | "E"
  signedInteger = "+" decimalDigit* -- positive
                | "-" decimalDigit* -- negative
                |     decimalDigit+ -- noSign

  hexIntegerLiteral = "0x" hexDigit+
                    | "0X" hexDigit+

  // hexDigit defined in Ohm's built-in rules (otherwise: hexDigit = "0".."9" | "a".."f" | "A".."F")

  octalIntegerLiteral = "0" octalDigit+

  octalDigit = "0".."7"

  stringLiteral = "'" singleStringCharacter* "'"
  singleStringCharacter = 
    | ~("'" | "\\" | eol) sourceCharacter -- nonEscaped
    | "\\" escapeSequence                            -- escaped
  
  escapeSequence = 
    | unicodeEscapeSequence
    | hexEscapeSequence
    | octalEscapeSequence
    | characterEscapeSequence 

  characterEscapeSequence = singleEscapeCharacter | nonEscapeCharacter
  singleEscapeCharacter = "'" | "\"" | "\\" | "b" | "f" | "n" | "r" | "t" | "v"
  nonEscapeCharacter = ~(escapeCharacter | eol) sourceCharacter
  escapeCharacter = singleEscapeCharacter | decimalDigit | "x" | "u"
  
  template = 
    | noSubstitutionTemplate
    | templateHead

  noSubstitutionTemplate = 
    | "`" templateCharacters? "`" -- alt1

  templateHead = 
    | "`" templateCharacters? "${" -- alt1

  templateSubstitutionTail = 
    | templateMiddle
    | templateTail

  templateMiddle = 
    | "}" templateCharacters? "${" -- alt1

  templateTail = 
    | "}" templateCharacters? "`" -- alt1

  templateCharacters = 
    | templateCharacter+

  templateCharacter = 
    | "$" ~"{" -- alt1
    | "\\" escapeSequence -- alt2
    | lineContinuation -- alt3
    | eolSequence -- alt4
    | ~("`" | "\\" | "$" | eol) sourceCharacter -- alt5

  octalEscapeSequence = zeroToThree octalDigit octalDigit    -- whole
                      | fourToSeven octalDigit               -- eightTimesfourToSeven
                      | zeroToThree octalDigit ~decimalDigit -- eightTimesZeroToThree
                      | octalDigit ~decimalDigit             -- octal
  hexEscapeSequence = "x" hexDigit hexDigit
  unicodeEscapeSequence = "u" hexDigit hexDigit hexDigit hexDigit

  zeroToThree = "0".."3"
  fourToSeven = "4".."7"

  // §7.8.5 Regular Expression Literals -- https://es5.github.io/#x7.8.5

  regularExpressionLiteral = "/" regularExpressionBody "/" regularExpressionFlags
  regularExpressionBody = regularExpressionFirstChar regularExpressionChar*
  regularExpressionFirstChar = ~("*" | "\\" | "/" | "[") regularExpressionNonTerminator
                             | regularExpressionBackslashSequence
                             | regularExpressionClass
  regularExpressionChar = ~("\\" | "/" | "[") regularExpressionNonTerminator
                        | regularExpressionBackslashSequence
                        | regularExpressionClass
  regularExpressionBackslashSequence = "\\" regularExpressionNonTerminator
  regularExpressionNonTerminator = ~(eol) sourceCharacter
  regularExpressionClass = "[" regularExpressionClassChar* "]"
  regularExpressionClassChar = ~("]" | "\\") regularExpressionNonTerminator
                             | regularExpressionBackslashSequence
  regularExpressionFlags = identifierPart*

  // === Implementation-level rules (not part of the spec) ===

  multiLineCommentNoNL = "/*" (~("*/" | eol) sourceCharacter)* "*/"

}
