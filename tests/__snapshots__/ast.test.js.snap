// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`module declaration with selective exporting 1`] = `
{
  "body": {},
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {
    "exporting": [
      {
        "name": "baz",
        "type": "Identifier",
      },
      {
        "name": "zuu",
        "type": "Identifier",
      },
    ],
    "namespace": "Foo.Bar",
    "type": "ModuleDeclaration",
  },
  "openStatements": [],
  "type": "Program",
}
`;

exports[`wide open statement 1`] = `
{
  "body": {},
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [
    {
      "importing": [],
      "namespace": "Foo.Bar",
      "type": "OpenStatement",
    },
  ],
  "type": "Program",
}
`;

exports[`selective open statement 1`] = `
{
  "body": {},
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [
    {
      "importing": [
        {
          "name": "foo",
          "type": "Identifier",
        },
        {
          "name": "bar",
          "type": "Identifier",
        },
      ],
      "namespace": "Baz",
      "type": "OpenStatement",
    },
  ],
  "type": "Program",
}
`;

exports[`boundless import statement 1`] = `
{
  "body": {},
  "filename": "./testing/source.fly",
  "importStatements": [
    {
      "packageName": {
        "kind": "string",
        "type": "PrimitiveValue",
        "value": "dotenv",
      },
      "type": "ImportStatement",
    },
  ],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`default import statement 1`] = `
{
  "body": {},
  "filename": "./testing/source.fly",
  "importStatements": [
    {
      "importing": {
        "name": "express",
        "type": "Identifier",
      },
      "isDefaultImport": true,
      "packageName": {
        "kind": "string",
        "type": "PrimitiveValue",
        "value": "express",
      },
      "type": "ImportStatement",
    },
  ],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`selective import statement 1`] = `
{
  "body": {},
  "filename": "./testing/source.fly",
  "importStatements": [
    {
      "importing": [
        {
          "name": "expect",
          "type": "Identifier",
        },
        {
          "name": "test",
          "type": "Identifier",
        },
      ],
      "packageName": {
        "kind": "string",
        "type": "PrimitiveValue",
        "value": "testing-lib",
      },
      "type": "ImportStatement",
    },
  ],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`star import statement 1`] = `
{
  "body": {},
  "filename": "./testing/source.fly",
  "importStatements": [
    {
      "importing": {
        "name": "React",
        "type": "Identifier",
      },
      "isStarImport": true,
      "packageName": {
        "kind": "string",
        "type": "PrimitiveValue",
        "value": "react",
      },
      "type": "ImportStatement",
    },
  ],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`block with literals 1`] = `
{
  "body": [
    {
      "body": [
        {
          "kind": "string",
          "type": "PrimitiveValue",
          "value": "foo",
        },
        "true",
        {
          "kind": "number",
          "type": "PrimitiveValue",
          "value": "123",
        },
        {
          "kind": "number",
          "type": "PrimitiveValue",
          "value": "433_123_2.34",
        },
        {
          "kind": "number",
          "type": "PrimitiveValue",
          "value": "0.14",
        },
      ],
      "type": "Block",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`template string with interpolation 1`] = `
{
  "body": [
    {
      "head": {
        "text": "Hello ",
        "type": "TemplateHead",
      },
      "spans": [
        {
          "expression": {
            "name": "name",
            "type": "Identifier",
          },
          "text": {
            "text": "!",
            "type": "TemplateTail",
          },
          "type": "TemplateSpan",
        },
      ],
      "type": "TemplateLiteral",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`array literal 1`] = `
{
  "body": [
    {
      "items": [
        {
          "kind": "number",
          "type": "PrimitiveValue",
          "value": "1",
        },
        {
          "kind": "number",
          "type": "PrimitiveValue",
          "value": "2",
        },
        {
          "kind": "number",
          "type": "PrimitiveValue",
          "value": "3",
        },
      ],
      "type": "ArrayLiteral",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`object literal with parens 1`] = `
{
  "body": [
    {
      "expression": {
        "properties": [
          {
            "name": {
              "name": "name",
              "type": "Identifier",
            },
            "type": "ObjectProperty",
            "value": {
              "kind": "string",
              "type": "PrimitiveValue",
              "value": "Andrew",
            },
          },
          {
            "name": {
              "name": "age",
              "type": "Identifier",
            },
            "type": "ObjectProperty",
            "value": {
              "kind": "number",
              "type": "PrimitiveValue",
              "value": "109",
            },
          },
        ],
        "type": "ObjectLiteral",
      },
      "type": "ParenthsizedExpression",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`const declaration without annotation 1`] = `
{
  "body": [
    {
      "name": {
        "name": "one",
        "type": "Identifier",
      },
      "type": "ConstDeclaration",
      "typeAnnotation": {
        "expression": {
          "type": "InferenceRequired",
        },
        "type": "TypeAnnotation",
      },
      "value": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "1",
      },
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`const declaration with annotation 1`] = `
{
  "body": [
    {
      "name": {
        "name": "two",
        "type": "Identifier",
      },
      "type": "ConstDeclaration",
      "typeAnnotation": {
        "expression": {
          "arguments": {},
          "identifier": {
            "kind": "number",
            "type": "NativeType",
          },
          "type": "TypeReference",
        },
        "type": "TypeAnnotation",
      },
      "value": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "2",
      },
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`const declaration with typeof in annotation 1`] = `
{
  "body": [
    {
      "name": {
        "name": "email",
        "type": "Identifier",
      },
      "type": "ConstDeclaration",
      "typeAnnotation": {
        "expression": {
          "expression": {
            "arguments": {},
            "identifier": {
              "name": "Email",
              "type": "Identifier",
            },
            "type": "TypeReference",
          },
          "kind": "typeof",
          "type": "OfTypeExpression",
        },
        "type": "TypeAnnotation",
      },
      "value": {
        "kind": "string",
        "type": "PrimitiveValue",
        "value": "foo@bar.com",
      },
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`const declaration with array destructuring 1`] = `
{
  "body": [
    {
      "name": [
        {
          "name": "one",
          "type": "Identifier",
        },
        {
          "name": "two",
          "type": "Identifier",
        },
      ],
      "type": "ConstDeclaration",
      "typeAnnotation": {
        "expression": {
          "type": "InferenceRequired",
        },
        "type": "TypeAnnotation",
      },
      "value": {
        "items": [
          {
            "kind": "number",
            "type": "PrimitiveValue",
            "value": "1",
          },
          {
            "kind": "number",
            "type": "PrimitiveValue",
            "value": "2",
          },
        ],
        "type": "ArrayLiteral",
      },
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`const declaration with object destructuring 1`] = `
{
  "body": [
    {
      "name": [
        {
          "name": "name",
          "type": "Identifier",
        },
      ],
      "type": "ConstDeclaration",
      "typeAnnotation": {
        "expression": {
          "type": "InferenceRequired",
        },
        "type": "TypeAnnotation",
      },
      "value": {
        "name": "user",
        "type": "Identifier",
      },
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`const declaration with object destructuring to an alias 1`] = `
{
  "body": [
    {
      "name": [
        {
          "name": {
            "name": "foo",
            "type": "Identifier",
          },
          "sourceName": {
            "name": "name",
            "type": "Identifier",
          },
          "type": "AliasableIdentifier",
        },
      ],
      "type": "ConstDeclaration",
      "typeAnnotation": {
        "expression": {
          "type": "InferenceRequired",
        },
        "type": "TypeAnnotation",
      },
      "value": {
        "name": "user",
        "type": "Identifier",
      },
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`const declaration with a function 1`] = `
{
  "body": [
    {
      "name": {
        "name": "greet",
        "type": "Identifier",
      },
      "type": "ConstDeclaration",
      "typeAnnotation": {
        "expression": {
          "type": "InferenceRequired",
        },
        "type": "TypeAnnotation",
      },
      "value": {
        "async": {},
        "body": {
          "body": {},
          "type": "Block",
        },
        "parameters": [
          {
            "identifier": {
              "name": "name",
              "type": "Identifier",
            },
            "isSpread": {},
            "type": "Parameter",
            "typeAnnotation": {
              "expression": {
                "arguments": {},
                "identifier": {
                  "kind": "string",
                  "type": "NativeType",
                },
                "type": "TypeReference",
              },
              "type": "TypeAnnotation",
            },
          },
        ],
        "returnType": {
          "expression": {
            "type": "InferenceRequired",
          },
          "type": "TypeAnnotation",
        },
        "type": "FunctionExpression",
      },
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`const declaration with an async function 1`] = `
{
  "body": [
    {
      "name": {
        "name": "fetch",
        "type": "Identifier",
      },
      "type": "ConstDeclaration",
      "typeAnnotation": {
        "expression": {
          "type": "InferenceRequired",
        },
        "type": "TypeAnnotation",
      },
      "value": {
        "async": true,
        "body": {
          "body": {},
          "type": "Block",
        },
        "parameters": [
          {
            "identifier": {
              "name": "url",
              "type": "Identifier",
            },
            "isSpread": {},
            "type": "Parameter",
            "typeAnnotation": {
              "expression": {
                "arguments": {},
                "identifier": {
                  "kind": "string",
                  "type": "NativeType",
                },
                "type": "TypeReference",
              },
              "type": "TypeAnnotation",
            },
          },
        ],
        "returnType": {
          "expression": {
            "type": "InferenceRequired",
          },
          "type": "TypeAnnotation",
        },
        "type": "FunctionExpression",
      },
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`typeof type expression 1`] = `
{
  "body": [
    {
      "identifier": {
        "name": "Foo",
        "type": "Identifier",
      },
      "parameters": [],
      "type": "TypeDeclaration",
      "value": {
        "expression": {
          "arguments": {},
          "identifier": {
            "name": "Bar",
            "type": "Identifier",
          },
          "type": "TypeReference",
        },
        "kind": "typeof",
        "type": "OfTypeExpression",
      },
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`keyof type expression 1`] = `
{
  "body": [
    {
      "identifier": {
        "name": "Foo",
        "type": "Identifier",
      },
      "parameters": [],
      "type": "TypeDeclaration",
      "value": {
        "expression": {
          "arguments": {},
          "identifier": {
            "name": "Bar",
            "type": "Identifier",
          },
          "type": "TypeReference",
        },
        "kind": "keyof",
        "type": "OfTypeExpression",
      },
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`array shorthand type expression 1`] = `
{
  "body": [
    {
      "identifier": {
        "name": "Users",
        "type": "Identifier",
      },
      "parameters": [],
      "type": "TypeDeclaration",
      "value": {
        "arguments": {
          "arguments": {},
          "identifier": {
            "name": "User",
            "type": "Identifier",
          },
          "type": "TypeReference",
        },
        "identifier": {
          "name": "array",
          "type": "Identifier",
        },
        "type": "TypeReference",
      },
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`intersection type expression 1`] = `
{
  "body": [
    {
      "identifier": {
        "name": "User",
        "type": "Identifier",
      },
      "parameters": [],
      "type": "TypeDeclaration",
      "value": {
        "left": {
          "arguments": {},
          "identifier": {
            "name": "Guest",
            "type": "Identifier",
          },
          "type": "TypeReference",
        },
        "right": {
          "definitions": [
            {
              "name": {
                "name": "password",
                "type": "Identifier",
              },
              "type": "PropertyTypeDefinition",
              "value": {
                "arguments": {},
                "identifier": {
                  "kind": "string",
                  "type": "NativeType",
                },
                "type": "TypeReference",
              },
            },
          ],
          "type": "ObjectType",
        },
        "type": "IntersectionType",
      },
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`simple enum (single) 1`] = `
{
  "body": [
    {
      "identifier": {
        "name": "Foo",
        "type": "Identifier",
      },
      "members": [
        {
          "identifier": {
            "name": "Bar",
            "type": "Identifier",
          },
          "parameters": [],
          "type": "EnumMember",
        },
      ],
      "parameters": [],
      "type": "EnumDeclaration",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`simple enum (multi) 1`] = `
{
  "body": [
    {
      "identifier": {
        "name": "Direction",
        "type": "Identifier",
      },
      "members": [
        {
          "identifier": {
            "name": "North",
            "type": "Identifier",
          },
          "parameters": [],
          "type": "EnumMember",
        },
        {
          "identifier": {
            "name": "South",
            "type": "Identifier",
          },
          "parameters": [],
          "type": "EnumMember",
        },
        {
          "identifier": {
            "name": "East",
            "type": "Identifier",
          },
          "parameters": [],
          "type": "EnumMember",
        },
        {
          "identifier": {
            "name": "West",
            "type": "Identifier",
          },
          "parameters": [],
          "type": "EnumMember",
        },
      ],
      "parameters": [],
      "type": "EnumDeclaration",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`enum with generic 1`] = `
{
  "body": [
    {
      "identifier": {
        "name": "Maybe",
        "type": "Identifier",
      },
      "members": [
        {
          "identifier": {
            "identifier": {
              "name": "Some",
              "type": "Identifier",
            },
            "parameters": [
              {
                "arguments": {},
                "identifier": {
                  "name": "T",
                  "type": "Identifier",
                },
                "type": "TypeReference",
              },
            ],
            "type": "EnumMember",
          },
          "parameters": [],
          "type": "EnumMember",
        },
        {
          "identifier": {
            "name": "None",
            "type": "Identifier",
          },
          "parameters": [],
          "type": "EnumMember",
        },
      ],
      "parameters": [
        [
          {
            "name": "T",
            "type": "Identifier",
          },
        ],
      ],
      "type": "EnumDeclaration",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`function type expression 1`] = `
{
  "body": [
    {
      "identifier": {
        "name": "AuthFn",
        "type": "Identifier",
      },
      "parameters": [],
      "type": "TypeDeclaration",
      "value": {
        "parameters": [
          {
            "identifier": {
              "name": "user",
              "type": "Identifier",
            },
            "isSpread": {},
            "type": "Parameter",
            "typeAnnotation": {
              "expression": {
                "arguments": {},
                "identifier": {
                  "name": "User",
                  "type": "Identifier",
                },
                "type": "TypeReference",
              },
              "type": "TypeAnnotation",
            },
          },
        ],
        "returnType": {
          "arguments": {},
          "identifier": {
            "name": "AuthResult",
            "type": "Identifier",
          },
          "type": "TypeReference",
        },
        "type": "FunctionType",
      },
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`calling a function 1`] = `
{
  "body": [
    {
      "arguments": [
        {
          "kind": "string",
          "type": "PrimitiveValue",
          "value": "World",
        },
      ],
      "expression": {
        "name": "greet",
        "type": "Identifier",
      },
      "type": "FunctionCall",
      "typeArguments": [],
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`calling an async function 1`] = `
{
  "body": [
    {
      "expression": {
        "arguments": [
          {
            "name": "url",
            "type": "Identifier",
          },
        ],
        "expression": {
          "name": "fetch",
          "type": "Identifier",
        },
        "type": "FunctionCall",
        "typeArguments": [],
      },
      "type": "AwaitExpression",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`calling a function with type arguments 1`] = `
{
  "body": [
    {
      "expression": {
        "arguments": [
          {
            "name": "url",
            "type": "Identifier",
          },
        ],
        "expression": {
          "name": "fetchModel",
          "type": "Identifier",
        },
        "type": "FunctionCall",
        "typeArguments": [
          [
            {
              "arguments": {},
              "identifier": {
                "name": "User",
                "type": "Identifier",
              },
              "type": "TypeReference",
            },
          ],
        ],
      },
      "type": "AwaitExpression",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`dot notation expression 1`] = `
{
  "body": [
    {
      "left": {
        "name": "foo",
        "type": "Identifier",
      },
      "right": {
        "name": "bar",
        "type": "Identifier",
      },
      "type": "DotNotationCall",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`index access on an identifier 1`] = `
{
  "body": [
    {
      "expression": {
        "name": "foo",
        "type": "Identifier",
      },
      "indexArgument": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "2",
      },
      "type": "IndexAccessCall",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`data value call 1`] = `
{
  "body": [
    {
      "arguments": [
        {
          "kind": "string",
          "type": "PrimitiveValue",
          "value": "test",
        },
      ],
      "expression": {
        "name": "Some",
        "type": "Identifier",
      },
      "type": "EnumCall",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`if/else expression on single line 1`] = `
{
  "body": [
    {
      "condition": "true",
      "falseBlock": {
        "arguments": [],
        "expression": {
          "name": "falseBlock",
          "type": "Identifier",
        },
        "type": "FunctionCall",
        "typeArguments": [],
      },
      "trueBlock": {
        "arguments": [],
        "expression": {
          "name": "trueBlock",
          "type": "Identifier",
        },
        "type": "FunctionCall",
        "typeArguments": [],
      },
      "type": "IfElseExpression",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`if/else expression with blocks 1`] = `
{
  "body": [
    {
      "condition": "true",
      "falseBlock": {
        "body": [
          {
            "arguments": [],
            "expression": {
              "name": "falseBlock",
              "type": "Identifier",
            },
            "type": "FunctionCall",
            "typeArguments": [],
          },
        ],
        "type": "Block",
      },
      "trueBlock": {
        "body": [
          {
            "arguments": [],
            "expression": {
              "name": "trueBlock",
              "type": "Identifier",
            },
            "type": "FunctionCall",
            "typeArguments": [],
          },
        ],
        "type": "Block",
      },
      "type": "IfElseExpression",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`match expression with basic literal patterns 1`] = `
{
  "body": [
    {
      "clauses": [
        {
          "body": {
            "arguments": [],
            "expression": {
              "name": "trueBlock",
              "type": "Identifier",
            },
            "type": "FunctionCall",
            "typeArguments": [],
          },
          "isDefault": {},
          "pattern": "true",
          "type": "MatchClause",
        },
        {
          "body": {
            "arguments": [],
            "expression": {
              "name": "trueBlock",
              "type": "Identifier",
            },
            "type": "FunctionCall",
            "typeArguments": [],
          },
          "isDefault": {},
          "pattern": {
            "kind": "string",
            "type": "PrimitiveValue",
            "value": "yes",
          },
          "type": "MatchClause",
        },
        {
          "body": {
            "arguments": [],
            "expression": {
              "name": "gotNum",
              "type": "Identifier",
            },
            "type": "FunctionCall",
            "typeArguments": [],
          },
          "isDefault": {},
          "pattern": {
            "kind": "number",
            "type": "PrimitiveValue",
            "value": "14",
          },
          "type": "MatchClause",
        },
      ],
      "subject": {
        "name": "subject",
        "type": "Identifier",
      },
      "type": "MatchExpression",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`forward pipe with placeholder expression 1`] = `
{
  "body": [
    {
      "direction": "backward",
      "left": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "10",
      },
      "right": {
        "arguments": [
          {
            "kind": "string",
            "type": "PrimitiveValue",
            "value": "num: %d",
          },
          "@",
        ],
        "expression": {
          "left": {
            "name": "Console",
            "type": "Identifier",
          },
          "right": {
            "name": "log",
            "type": "Identifier",
          },
          "type": "DotNotationCall",
        },
        "type": "FunctionCall",
        "typeArguments": [],
      },
      "type": "PipeExpression",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`backward pipe 1`] = `
{
  "body": [
    {
      "direction": "backward",
      "left": {
        "arguments": [
          {
            "kind": "string",
            "type": "PrimitiveValue",
            "value": "num: %d",
          },
        ],
        "expression": {
          "left": {
            "name": "Console",
            "type": "Identifier",
          },
          "right": {
            "name": "log",
            "type": "Identifier",
          },
          "type": "DotNotationCall",
        },
        "type": "FunctionCall",
        "typeArguments": [],
      },
      "right": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "10",
      },
      "type": "PipeExpression",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`addition 1`] = `
{
  "body": [
    {
      "left": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "4",
      },
      "op": "addition",
      "right": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "5",
      },
      "type": "BinaryOperation",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`subtraction 1`] = `
{
  "body": [
    {
      "left": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "5",
      },
      "op": "subtraction",
      "right": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "4",
      },
      "type": "BinaryOperation",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`multiplication 1`] = `
{
  "body": [
    {
      "left": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "5",
      },
      "op": "multiply",
      "right": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "4",
      },
      "type": "BinaryOperation",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`division 1`] = `
{
  "body": [
    {
      "left": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "20",
      },
      "op": "divide",
      "right": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "4",
      },
      "type": "BinaryOperation",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`exponentiation 1`] = `
{
  "body": [
    {
      "left": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "2",
      },
      "op": "exponentiation",
      "right": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "10",
      },
      "type": "BinaryOperation",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`maths operators combined 1`] = `
{
  "body": [
    {
      "left": {
        "left": {
          "kind": "number",
          "type": "PrimitiveValue",
          "value": "4",
        },
        "op": "addition",
        "right": {
          "left": {
            "left": {
              "kind": "number",
              "type": "PrimitiveValue",
              "value": "5",
            },
            "op": "multiply",
            "right": {
              "kind": "number",
              "type": "PrimitiveValue",
              "value": "10",
            },
            "type": "BinaryOperation",
          },
          "op": "divide",
          "right": {
            "kind": "number",
            "type": "PrimitiveValue",
            "value": "2",
          },
          "type": "BinaryOperation",
        },
        "type": "BinaryOperation",
      },
      "op": "subtraction",
      "right": {
        "kind": "number",
        "type": "PrimitiveValue",
        "value": "1",
      },
      "type": "BinaryOperation",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`equality comparison 1`] = `
{
  "body": [
    {
      "left": "true",
      "op": "equal",
      "right": "true",
      "type": "BinaryOperation",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;

exports[`inequality comparison 1`] = `
{
  "body": [
    {
      "left": "true",
      "op": "notEqual",
      "right": "false",
      "type": "BinaryOperation",
    },
  ],
  "filename": "./testing/source.fly",
  "importStatements": [],
  "moduleDeclaration": {},
  "openStatements": [],
  "type": "Program",
}
`;
